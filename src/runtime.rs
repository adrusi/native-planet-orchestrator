#[allow(unused_imports)] use crate::prelude::*;

use async_std::io;
use async_std::path::{Path, PathBuf};
use serde::de::{self, Visitor};
use sha2::Sha512;
use std::env;
use std::fmt::Display;
use tokio::process;

#[cfg(target_arch = "x86_64")]
const TARGET_ARCH: &'static str = "x86_64";

#[cfg(target_arch = "aarch64")]
const TARGET_ARCH: &'static str = "aarch64";

lazy_static! {
    pub static ref URBIT_BIN_REPO: reqwest::Url = env::var_os("NUCLEUS_URBIT_REPO")
        .map(|s| s.to_str().unwrap().parse::<reqwest::Url>().unwrap())
        .unwrap_or("https://urbit-binaries.example.org/".parse::<reqwest::Url>().unwrap())
        .join(&format!("{TARGET_ARCH}/")).unwrap();

    pub static ref RUNTIME_HOME: PathBuf = env::var_os("NUCLEUS_RUNTIME_HOME")
        .map(|s| PathBuf::from(s))
        .unwrap_or(PathBuf::from("/var/urbits"));
}

pub use Version::*;
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Ord, PartialOrd)]
pub enum Version {
    UrbitV1_0,
    UrbitV1_1,
    UrbitV1_2,
    UrbitV1_3,
    UrbitV1_4,
    UrbitV1_5,
    UrbitV1_6,
    UrbitV1_7,
    UrbitV1_8,
    UrbitV1_9,
}

impl Version {
    #[cfg(target_arch = "x86_64")]
    #[inline]
    pub fn binary_checksum(&self) -> [u8; 64] {
        match *self {
            UrbitV1_0 => [0x54, 0x2c, 0xbf, 0xe3, 0xb4, 0xef, 0x25, 0xb3,
                          0xbc, 0x2e, 0x52, 0xd8, 0x58, 0xa3, 0x87, 0x35,
                          0xd0, 0xe5, 0x6a, 0xbc, 0x0d, 0xa8, 0x8a, 0xbc,
                          0x68, 0xb5, 0xfb, 0xda, 0xef, 0xbe, 0x4b, 0xfd,
                          0x77, 0x54, 0xef, 0xe6, 0x61, 0x95, 0xe7, 0x13,
                          0x57, 0x5b, 0x3e, 0x10, 0x34, 0x43, 0xc0, 0xc3,
                          0x39, 0xb7, 0xc4, 0xe7, 0x25, 0xf8, 0x01, 0xa7,
                          0x13, 0x9e, 0xca, 0x8e, 0xe5, 0x43, 0xc0, 0x25],
            UrbitV1_1 => [0x6e, 0x35, 0x4c, 0x14, 0x08, 0x59, 0x56, 0xe2,
                          0x08, 0xb4, 0x17, 0x2d, 0xda, 0x2c, 0x30, 0x5f,
                          0xac, 0xd1, 0x62, 0x13, 0x32, 0xe0, 0x5c, 0x7a,
                          0x6a, 0xe0, 0xc9, 0x4b, 0x6e, 0x57, 0x12, 0x91,
                          0xcd, 0x94, 0x15, 0x7b, 0x98, 0xc2, 0x77, 0xfa,
                          0xd7, 0xdf, 0x63, 0xaf, 0x8b, 0x7b, 0x3a, 0xc6,
                          0xd1, 0x2f, 0x34, 0x2b, 0x90, 0xfd, 0xea, 0x32,
                          0x63, 0x48, 0xa2, 0xb5, 0x0a, 0x38, 0xe0, 0xb3],
            UrbitV1_2 => [0x57, 0x4a, 0xce, 0x6b, 0xa6, 0x03, 0x21, 0x3f,
                          0x88, 0x42, 0x9f, 0x9c, 0xb9, 0xad, 0xde, 0xba,
                          0x51, 0x41, 0x69, 0x44, 0x3e, 0xdb, 0x4a, 0xb4,
                          0xc1, 0x0a, 0xcd, 0x53, 0xef, 0x9e, 0x13, 0x4b,
                          0xb4, 0x0c, 0x91, 0xae, 0xb4, 0x65, 0x2d, 0xad,
                          0xc0, 0x32, 0xe5, 0x11, 0x2b, 0xc3, 0x8a, 0xb0,
                          0xd6, 0x19, 0xa0, 0x03, 0xde, 0xe0, 0xff, 0x28,
                          0x7f, 0x6e, 0x0e, 0xb9, 0x45, 0x53, 0xe7, 0x1f],
            UrbitV1_3 => [0xd6, 0xf4, 0x9c, 0x4c, 0x2b, 0x83, 0x27, 0x06,
                          0x03, 0xe5, 0xfc, 0xfc, 0x88, 0x6f, 0x3f, 0xe9,
                          0xc8, 0xbc, 0x65, 0x4f, 0x67, 0x8d, 0x17, 0x91,
                          0x52, 0x82, 0xd4, 0x9a, 0x3c, 0xb4, 0x0e, 0x6c,
                          0x51, 0xbb, 0x41, 0xdc, 0xd0, 0x41, 0x07, 0xa5,
                          0x89, 0xd7, 0x50, 0x83, 0xb1, 0x58, 0x6d, 0xe8,
                          0xbf, 0x89, 0x8f, 0xa4, 0x70, 0x7f, 0x6c, 0x81,
                          0x71, 0x28, 0x03, 0xdf, 0xb0, 0xe0, 0xf4, 0xcc],
            UrbitV1_4 => [0x83, 0x27, 0x03, 0xaf, 0xba, 0x3f, 0xd7, 0x9e,
                          0x33, 0x54, 0xf9, 0xdb, 0x16, 0xd1, 0x41, 0xdc,
                          0x85, 0x27, 0x8b, 0xfa, 0x33, 0xea, 0x22, 0x6f,
                          0x98, 0xad, 0x78, 0x0b, 0x06, 0x73, 0x8c, 0x87,
                          0xd3, 0x6d, 0x71, 0x00, 0x15, 0xc3, 0xc8, 0x9e,
                          0xc4, 0x6a, 0xeb, 0xe2, 0xf8, 0x3b, 0xbe, 0xf6,
                          0xaa, 0xce, 0xc0, 0xb2, 0xee, 0xb1, 0x0b, 0xbe,
                          0x7d, 0x79, 0xa5, 0xf1, 0x24, 0xa3, 0x52, 0x1d],
            UrbitV1_5 => [0xf0, 0xb7, 0x90, 0xbf, 0x88, 0x78, 0x32, 0xbf,
                          0xd6, 0xd3, 0x35, 0xba, 0x6a, 0x97, 0x2a, 0xf9,
                          0xea, 0x80, 0x26, 0x6f, 0xf8, 0x2d, 0x73, 0x7c,
                          0xca, 0xa3, 0x3b, 0xae, 0x40, 0xf9, 0x54, 0x57,
                          0x17, 0xfd, 0xac, 0x34, 0x92, 0x75, 0x1b, 0xf0,
                          0xb7, 0xe7, 0x21, 0x4b, 0x15, 0x1b, 0x3e, 0x82,
                          0x37, 0xff, 0x59, 0xaf, 0xfc, 0xa9, 0x5f, 0x38,
                          0x1a, 0x04, 0xb3, 0xbf, 0x51, 0x6d, 0xe0, 0x5d],
            UrbitV1_6 => [0x42, 0x18, 0xde, 0xb6, 0xa2, 0x5b, 0xfa, 0x93,
                          0xef, 0xa0, 0x29, 0xc6, 0x7f, 0xf0, 0x30, 0xd0,
                          0x95, 0xe4, 0x34, 0x4c, 0x5b, 0x77, 0xe4, 0xdc,
                          0x5c, 0xea, 0xd1, 0x03, 0x05, 0x03, 0x13, 0x2b,
                          0x3f, 0xeb, 0x6a, 0xaa, 0x98, 0x77, 0x3a, 0x83,
                          0xa9, 0xa9, 0x9c, 0x1d, 0xd5, 0x27, 0x0a, 0xa5,
                          0x03, 0x52, 0x1b, 0xab, 0x54, 0x29, 0xda, 0xb1,
                          0x76, 0x57, 0x10, 0x75, 0x9e, 0x31, 0x5b, 0xaf],
            UrbitV1_7 => [0xce, 0x17, 0xd8, 0x96, 0xdf, 0x1a, 0x45, 0xca,
                          0x7c, 0x92, 0x07, 0xb5, 0x15, 0x05, 0xd8, 0x79,
                          0x76, 0x03, 0x4c, 0x38, 0x34, 0x5f, 0xd5, 0x5e,
                          0xfa, 0x95, 0x2c, 0x49, 0xd0, 0x72, 0xac, 0xdf,
                          0x15, 0xb7, 0xb4, 0x26, 0x87, 0x33, 0x83, 0x1b,
                          0x5a, 0x71, 0x03, 0x2e, 0x7c, 0xa5, 0x2b, 0x26,
                          0x08, 0x57, 0x99, 0xed, 0x13, 0xcb, 0xe2, 0xa1,
                          0xde, 0xbc, 0x00, 0x37, 0x5b, 0x32, 0xc9, 0x3f],
            UrbitV1_8 => [0xf0, 0x6d, 0xba, 0x5e, 0x93, 0x00, 0x82, 0x79,
                          0x16, 0x8d, 0xb4, 0xab, 0x42, 0x7a, 0xa6, 0x2b,
                          0x5e, 0xe0, 0x35, 0xfd, 0x60, 0x50, 0x92, 0x12,
                          0x2b, 0xfd, 0xbd, 0x6d, 0x87, 0x52, 0xf3, 0x48,
                          0x57, 0x9c, 0xbd, 0x42, 0x71, 0x41, 0xb1, 0x1e,
                          0x95, 0xdf, 0x14, 0x6f, 0xe6, 0xb1, 0xe2, 0x9d,
                          0xcb, 0xa9, 0x09, 0xba, 0x76, 0x11, 0x64, 0x8b,
                          0x54, 0xf5, 0x04, 0xe6, 0xb4, 0xb1, 0x9b, 0x61],
            UrbitV1_9 => [0x48, 0xe4, 0xe1, 0x97, 0x35, 0x01, 0xd9, 0x17,
                          0x91, 0xcd, 0xd4, 0x3f, 0xd0, 0x28, 0x73, 0xbb,
                          0x7c, 0xf4, 0x39, 0x01, 0x49, 0x24, 0x51, 0xa6,
                          0x8a, 0x4a, 0x9e, 0x39, 0x0b, 0x9f, 0xc0, 0x0d,
                          0x88, 0x52, 0xc5, 0xab, 0x44, 0xaa, 0x99, 0x9d,
                          0xde, 0x5d, 0xac, 0x88, 0xfc, 0x03, 0xaf, 0x75,
                          0x6b, 0xfd, 0xab, 0x9c, 0x00, 0x94, 0x99, 0xbf,
                          0x1e, 0xee, 0x4d, 0x01, 0xab, 0x46, 0x2b, 0x2c],
        }
    }

    #[cfg(target_arch = "aarch64")]
    #[inline]
    pub fn binary_checksum(&self) -> [u8; 64] {
        match *self {
            UrbitV1_0 => [0xca, 0x45, 0x52, 0x74, 0xce, 0xd7, 0x71, 0x43,
                          0xef, 0xc4, 0x94, 0x8c, 0xa0, 0x7b, 0xfa, 0x00,
                          0x6a, 0xbf, 0x33, 0x3b, 0xa8, 0xcd, 0x2b, 0x32,
                          0xc9, 0x7f, 0xfe, 0x90, 0xbb, 0x8b, 0x09, 0x27,
                          0xa9, 0x23, 0x28, 0x76, 0x12, 0xdc, 0x3c, 0x35,
                          0xa0, 0x24, 0xad, 0x8c, 0xfb, 0xcf, 0x1c, 0x61,
                          0xa2, 0x32, 0x85, 0xeb, 0xed, 0xac, 0x38, 0xce,
                          0x8a, 0xa4, 0x77, 0x53, 0x93, 0x0a, 0x36, 0xcc],
            UrbitV1_1 => [0x00, 0xeb, 0xd4, 0x1c, 0xd8, 0x96, 0xa5, 0xa1,
                          0x26, 0x1f, 0x87, 0xe9, 0x9f, 0x17, 0x91, 0x76,
                          0x95, 0x36, 0x18, 0xe6, 0x65, 0xb2, 0xc2, 0xa1,
                          0xfb, 0x34, 0x07, 0x37, 0x3b, 0x1c, 0x00, 0x6b,
                          0xd2, 0xd2, 0x11, 0x8e, 0x41, 0x74, 0x63, 0x96,
                          0x7e, 0x4a, 0x5c, 0x7e, 0x01, 0x5c, 0xc7, 0xef,
                          0x26, 0xc8, 0x9c, 0x7d, 0xa2, 0x7d, 0xd0, 0x65,
                          0x49, 0xbc, 0x57, 0x9f, 0x0f, 0x49, 0xd1, 0x02],
            UrbitV1_2 => [0x74, 0x31, 0x21, 0x73, 0x19, 0x63, 0x00, 0xdd,
                          0xd4, 0x4f, 0x86, 0xe1, 0x30, 0xec, 0x33, 0x86,
                          0xbd, 0xb7, 0xa7, 0x59, 0x46, 0x34, 0x60, 0xe1,
                          0xa0, 0x46, 0xbd, 0x41, 0xb6, 0x5f, 0x98, 0x8b,
                          0xb9, 0xf0, 0x5b, 0xa6, 0x1a, 0xba, 0xe7, 0x63,
                          0x89, 0x58, 0x67, 0xb4, 0x24, 0x5f, 0x2c, 0x62,
                          0xe0, 0x7e, 0x4f, 0x0b, 0xf6, 0x3f, 0xda, 0x46,
                          0x26, 0x7e, 0xe8, 0x80, 0x4a, 0x94, 0xa0, 0x6e],
            UrbitV1_3 => [0x49, 0xa4, 0xb5, 0x38, 0xf1, 0x72, 0xe2, 0x85,
                          0xd1, 0x86, 0xa8, 0x74, 0x16, 0x34, 0xb4, 0xe7,
                          0x0f, 0x47, 0x94, 0xbe, 0x30, 0xf7, 0xb1, 0x09,
                          0xe1, 0xc6, 0x6d, 0x84, 0xe7, 0xfd, 0x97, 0xc3,
                          0x5f, 0xab, 0xb8, 0x26, 0x98, 0x36, 0x59, 0xde,
                          0x75, 0x2c, 0x80, 0xa5, 0x79, 0x26, 0x16, 0x5b,
                          0x5a, 0x75, 0x42, 0x8e, 0x21, 0x2c, 0x9c, 0xef,
                          0x97, 0xec, 0x46, 0xce, 0xd6, 0x39, 0xd3, 0xe5],
            UrbitV1_4 => [0x79, 0x15, 0x62, 0x65, 0x0b, 0x6b, 0x27, 0x70,
                          0x72, 0x7b, 0xce, 0x5d, 0xdb, 0x40, 0x86, 0x19,
                          0xf1, 0x38, 0xc8, 0x97, 0x3a, 0x08, 0x47, 0x14,
                          0xd8, 0xe1, 0x94, 0x71, 0xa5, 0x42, 0xfc, 0xa9,
                          0x9d, 0x63, 0xc9, 0x13, 0x79, 0x7a, 0xf8, 0x49,
                          0xde, 0x3f, 0xcf, 0x1a, 0x6a, 0x2b, 0x5b, 0xfe,
                          0x55, 0x21, 0x24, 0x1b, 0x25, 0x31, 0x35, 0x5b,
                          0x04, 0x47, 0x7f, 0xe4, 0xd0, 0x3e, 0xa8, 0xa5],
            UrbitV1_5 => [0xd5, 0xbf, 0xc4, 0x48, 0x9a, 0xb2, 0xf1, 0x2b,
                          0x19, 0xa2, 0x69, 0xc0, 0xd1, 0x3f, 0x83, 0x30,
                          0xb1, 0x0a, 0xc1, 0x8c, 0xaa, 0x39, 0xca, 0x76,
                          0xe9, 0xc5, 0x3b, 0x71, 0xb0, 0x36, 0xec, 0x1c,
                          0xd5, 0x28, 0xa8, 0xc3, 0x0c, 0xcc, 0xc3, 0x61,
                          0x87, 0x01, 0x11, 0x8b, 0x1c, 0x9a, 0xf1, 0x28,
                          0x7d, 0xee, 0x49, 0xb1, 0x85, 0xd2, 0x14, 0xd6,
                          0x64, 0xc3, 0x5e, 0x91, 0x57, 0x1c, 0x5a, 0xe6],
            UrbitV1_6 => [0x27, 0x99, 0x45, 0xf5, 0x67, 0x1a, 0xa7, 0xe5,
                          0x55, 0xec, 0xb8, 0xdb, 0x6f, 0xd9, 0x48, 0x37,
                          0x22, 0x50, 0x7a, 0x4d, 0x18, 0x7a, 0x23, 0xbc,
                          0xcc, 0x91, 0x77, 0xfd, 0x65, 0xce, 0xf4, 0xe4,
                          0x71, 0xfc, 0x22, 0x58, 0xb0, 0xf2, 0x8e, 0x6f,
                          0xe2, 0xd3, 0x4c, 0xdf, 0x72, 0xb1, 0x73, 0x53,
                          0x2a, 0x64, 0x18, 0xbb, 0x93, 0xb6, 0x23, 0xc9,
                          0xec, 0xa3, 0x9e, 0x04, 0x8a, 0x6b, 0x1c, 0x47],
            UrbitV1_7 => [0xf0, 0x6c, 0xf9, 0xf4, 0x08, 0x38, 0x23, 0xea,
                          0x5b, 0xc9, 0x54, 0x29, 0xf2, 0x9a, 0xa2, 0xf5,
                          0xd7, 0xd5, 0xf8, 0x80, 0x7b, 0x89, 0x0e, 0x9a,
                          0xe9, 0x51, 0xe5, 0x12, 0x8c, 0x1a, 0xbc, 0x0a,
                          0x0e, 0xec, 0x49, 0xe6, 0xa8, 0x4f, 0xeb, 0xa2,
                          0x8b, 0xa2, 0xc4, 0xc6, 0x34, 0xc7, 0xc8, 0xa0,
                          0x4c, 0xda, 0xc9, 0x99, 0x74, 0x28, 0xcc, 0x60,
                          0x9f, 0xad, 0x10, 0xbb, 0x09, 0x1b, 0xdd, 0x4c],
            UrbitV1_8 => [0xe6, 0x79, 0x84, 0x55, 0x9e, 0xc0, 0xf7, 0x35,
                          0x35, 0x75, 0xd7, 0x49, 0xc1, 0x2b, 0x54, 0x10,
                          0x37, 0xea, 0x41, 0x09, 0x6d, 0x3d, 0x50, 0x4a,
                          0xf7, 0x09, 0x64, 0x16, 0xba, 0xc3, 0x87, 0x73,
                          0x01, 0x41, 0x86, 0x87, 0xfb, 0xb9, 0xcf, 0x4b,
                          0x82, 0x3a, 0x5a, 0x20, 0x57, 0xae, 0x36, 0x96,
                          0x6a, 0xb3, 0x17, 0xdb, 0x20, 0xe5, 0xee, 0xb5,
                          0x85, 0xe8, 0xe9, 0x57, 0xe8, 0xa0, 0x61, 0xe8],
            UrbitV1_9 => [0x2a, 0xd7, 0xa9, 0x0c, 0xbb, 0xd9, 0x69, 0x2d,
                          0xdd, 0xc8, 0xd9, 0x05, 0x45, 0x2a, 0x0a, 0x17,
                          0x50, 0x07, 0x68, 0x03, 0xf4, 0x01, 0xd8, 0xff,
                          0x4a, 0xa7, 0x20, 0x95, 0xc6, 0xb1, 0x0b, 0xfb,
                          0x8e, 0x8e, 0x06, 0xf3, 0x6f, 0x58, 0xf0, 0xcd,
                          0xb3, 0xe5, 0x64, 0x53, 0x97, 0x32, 0x42, 0x54,
                          0xa6, 0x6a, 0x78, 0x77, 0xb6, 0x8e, 0x68, 0x13,
                          0xa1, 0x1a, 0xce, 0x05, 0x51, 0x67, 0x90, 0x3a],
        }
    }

    pub fn binary_name(self) -> String {
        // format!("urbit-{}", self)
        "urbit-{}".to_owned()
    }

    pub fn binary_path(self) -> PathBuf {
        // let mut result = RUNTIME_HOME.clone();
        // result.push(Path::new(&self.binary_name()));
        // result
        PathBuf::from("/usr/bin/urbit")
    }

    async fn ensure_installed(self) -> Result<()> {
        // let binary_path = self.binary_path();
        // if binary_path.exists().await {
        //     return Ok(());
        // }

        // let mut instream = self.fetch().await?;
        // let mut outfile = fs::OpenOptions::new()
        //     .create_new(true)
        //     .write(true)
        //     .open(&binary_path)
        //     .await?;

        // io::copy(&mut instream, &mut outfile).await?;

        Ok(())
    }

    pub async fn fetch(self) -> Result<impl io::Read> {
        Ok(
            reqwest::get(URBIT_BIN_REPO.join(&self.binary_name())?).await?
                .bytes_stream()
                .into_checksum_verify::<Sha512>(self.binary_checksum().into())
                .map_err(|e| futures::io::Error::new(futures::io::ErrorKind::Other, e))
                .into_async_read()
        )
    }

    fn translate_options(self, cmd: &mut process::Command, options: &Options<'_>) -> Result<()> {
        match options.new_pier {
            Some(path) => { cmd.arg("--pier").arg(path); },
            _ => {},
        }
        match options.keyfile {
            Some(path) => { cmd.arg("--key-file").arg(path); },
            _ => {},
        }
        match options.name {
            Some(name) => { cmd.arg("--name").arg(name); },
            _ => {},
        }
        match options.ames_port {
            Some(port) => { cmd.arg("--ames-port").arg(port.to_string()); },
            _ => {},
        }
        match options.http_port {
            Some(port) => { cmd.arg("--http-port").arg(port.to_string()); },
            _ => {},
        }
        match options.dock {
            Some(false) => { cmd.arg("--no-dock"); },
            _ => {},
        }
        match options.tty {
            Some(false) => { cmd.arg("--no-tty"); },
            _ => {},
        }
        match options.existing_pier {
            Some(path) => { cmd.arg(path); },
            _ => {},
        }

        Ok(())
    }

    pub async fn exec(self, options: &Options<'_>) -> Result<process::Child> {
        self.ensure_installed().await?;

        let mut cmd = process::Command::new(self.binary_path());
        self.translate_options(&mut cmd, options)?;
        cmd.kill_on_drop(true);

        Ok(cmd.spawn()?)
    }
}

impl Default for Version {
    fn default() -> Self {
        UrbitV1_9
    }
}

impl TryFrom<f32> for Version {
    type Error = anyhow::Error;

    fn try_from(v: f32) -> Result<Self> {
        (v as f64).try_into()
    }
}

impl TryFrom<f64> for Version {
    type Error = anyhow::Error;

    fn try_from(v: f64) -> Result<Self> {
             if v == 1.0 { Ok(UrbitV1_0) }
        else if v == 1.1 { Ok(UrbitV1_1) }
        else if v == 1.2 { Ok(UrbitV1_2) }
        else if v == 1.3 { Ok(UrbitV1_3) }
        else if v == 1.4 { Ok(UrbitV1_4) }
        else if v == 1.5 { Ok(UrbitV1_5) }
        else if v == 1.6 { Ok(UrbitV1_6) }
        else if v == 1.7 { Ok(UrbitV1_7) }
        else if v == 1.8 { Ok(UrbitV1_8) }
        else if v == 1.9 { Ok(UrbitV1_9) }
        else { bail!("invalid urbit version: {}", v) }
    }
}

impl TryFrom<&str> for Version {
    type Error = anyhow::Error;

    fn try_from(v: &str) -> Result<Self> {
        match v {
            "1.0" | "v1.0" => Ok(UrbitV1_0),
            "1.1" | "v1.1" => Ok(UrbitV1_1),
            "1.2" | "v1.2" => Ok(UrbitV1_2),
            "1.3" | "v1.3" => Ok(UrbitV1_3),
            "1.4" | "v1.4" => Ok(UrbitV1_4),
            "1.5" | "v1.5" => Ok(UrbitV1_5),
            "1.6" | "v1.6" => Ok(UrbitV1_6),
            "1.7" | "v1.7" => Ok(UrbitV1_7),
            "1.8" | "v1.8" => Ok(UrbitV1_8),
            "1.9" | "v1.9" => Ok(UrbitV1_9),
            _ => bail!("invalid urbit version: {}", v)
        }
    }
}

impl Into<String> for Version {
    fn into(self) -> String {
        match self {
            UrbitV1_0 => "v1.1".to_owned(),
            UrbitV1_1 => "v1.1".to_owned(),
            UrbitV1_2 => "v1.2".to_owned(),
            UrbitV1_3 => "v1.3".to_owned(),
            UrbitV1_4 => "v1.4".to_owned(),
            UrbitV1_5 => "v1.5".to_owned(),
            UrbitV1_6 => "v1.6".to_owned(),
            UrbitV1_7 => "v1.7".to_owned(),
            UrbitV1_8 => "v1.8".to_owned(),
            UrbitV1_9 => "v1.9".to_owned(),
        }
    }
}

impl Into<f32> for Version {
    fn into(self) -> f32 {
        match self {
            UrbitV1_0 => 1.1,
            UrbitV1_1 => 1.1,
            UrbitV1_2 => 1.2,
            UrbitV1_3 => 1.3,
            UrbitV1_4 => 1.4,
            UrbitV1_5 => 1.5,
            UrbitV1_6 => 1.6,
            UrbitV1_7 => 1.7,
            UrbitV1_8 => 1.8,
            UrbitV1_9 => 1.9,
        }
    }
}

impl Into<f64> for Version {
    fn into(self) -> f64 {
        let result: f32 = self.into();
        result as f64
    }
}

impl Display for Version {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s: String = (*self).into();
        f.write_str(&s)
    }
}

impl Serialize for Version {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where S: serde::Serializer
    {
        serializer.serialize_str(&format!("{}", *self))
    }
}

struct UrbitVersionVisitor;

impl<'de> Visitor<'de> for UrbitVersionVisitor {
    type Value = Version;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.write_str("a string \"vMAJOR.MINOR\" or a fractional numeral MAJOR.MINOR")
    }

    fn visit_f32<E: de::Error>(self, v: f32) -> std::result::Result<Self::Value, E> {
        v.try_into().map_err(E::custom)
    }

    fn visit_f64<E: de::Error>(self, v: f64) -> std::result::Result<Self::Value, E> {
        v.try_into().map_err(E::custom)
    }

    fn visit_str<E: de::Error>(self, v: &str) -> std::result::Result<Self::Value, E> {
        v.try_into().map_err(E::custom)
    }

    fn visit_borrowed_str<E: de::Error>(self, v: &'de str) -> std::result::Result<Self::Value, E> {
        v.try_into().map_err(E::custom)
    }

    fn visit_string<E: de::Error>(self, v: String) -> std::result::Result<Self::Value, E> {
        let vref: &str = &v;
        vref.try_into().map_err(E::custom)
    }
}

impl<'de> Deserialize<'de> for Version {
    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> std::result::Result<Self, D::Error> {
        deserializer.deserialize_any(UrbitVersionVisitor)
    }
}

#[derive(Clone, Default, Debug, Eq, Hash, PartialEq)]
pub struct Options<'a> {
    new_pier: Option<&'a Path>,
    keyfile: Option<&'a Path>,
    name: Option<&'a str>,
    ames_port: Option<u16>,
    http_port: Option<u16>,
    dock: Option<bool>,
    tty: Option<bool>,
    existing_pier: Option<&'a Path>,
}

impl<'a> Options<'a> {
    pub fn launch_existing_pier(pier: &'a Path) -> Self {
        let mut result = Options::default();
        result.existing_pier = Some(pier);
        result.tty = Some(false);
        result.dock = Some(false);
        result
    }

    pub fn launch_from_keyfile(keyfile: &'a Path, name: &'a str, pier: &'a Path) -> Self {
        let mut result = Options::default();
        result.new_pier = Some(pier);
        result.keyfile = Some(keyfile);
        result.name = Some(name);
        result.tty = Some(false);
        result.dock = Some(false);
        result
    }

    pub fn launch_new_comet(pier: &'a Path) -> Self {
        let mut result = Options::default();
        result.new_pier = Some(pier);
        result.tty = Some(false);
        result.dock = Some(false);
        result
    }

    pub fn ames_port(&mut self, p: u16) -> &mut Self {
        self.ames_port = Some(p);
        self
    }

    pub fn http_port(&mut self, p: u16) -> &mut Self {
        self.http_port = Some(p);
        self
    }
}